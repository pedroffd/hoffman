generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model activate_place_requests {
  id                            Int       @id @default(autoincrement())
  user_id                       Int?
  npi                           String?   @db.VarChar
  uuid                          String?   @db.VarChar
  manual_verification_requested Boolean?  @default(false)
  verified_at                   DateTime? @db.Timestamp(6)
  unverified_number             String?   @db.VarChar

  @@index([user_id], map: "idx_activate_place_requests_user_id")
  @@index([uuid], map: "idx_activate_place_requests_uuid")
  @@index([user_id], map: "index_activate_place_requests_on_user_id")
  @@index([uuid], map: "index_activate_place_requests_on_uuid")
}

model admins_places {
  place_id Int?
  user_id  Int?
  id       Int  @id @default(autoincrement())

  @@index([place_id, user_id], map: "index_admins_places_on_place_id_and_user_id")
}

model advertisements {
  id                   Int                    @id @default(autoincrement())
  title                String?                @db.VarChar
  message              String?                @db.VarChar
  link                 String?                @db.VarChar
  media                String?                @db.VarChar
  partner_id           Int?
  createdAt            DateTime               @default(now()) @map(name: "created_at")
  updatedAt            DateTime               @updatedAt @map(name: "updated_at")
  users                users?                 @relation(fields: [partner_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_advertisements_partner_id")
  users_advertisements users_advertisements[]
}

model chat_keys {
  id             Int      @id @default(autoincrement())
  conversation   String   @db.VarChar
  version        Int
  authentication String   @db.VarChar
  encryption     String   @db.VarChar
  createdAt      DateTime @default(now()) @map(name: "created_at")
  updatedAt      DateTime @updatedAt @map(name: "updated_at")

  @@unique([conversation, version])
  @@unique([conversation, version], map: "idx_chat_keys_conversation_version")
  @@index([conversation], map: "idx_chat_keys_conversation")
  @@index([version], map: "idx_chat_keys_version")
  @@index([conversation], map: "index_chat_keys_on_conversation")
  @@index([version], map: "index_chat_keys_on_version")
}

model contact_requests {
  id          Int      @id @default(autoincrement())
  message     String?
  user_id     Int?
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @updatedAt @map(name: "updated_at")
  web_request Boolean? @default(false)
}

model conversations {
  id                        Int       @id @default(autoincrement())
  space_id                  Int?
  user_id                   Int?
  other_user_id             Int?
  identifier                String?   @db.VarChar
  last_message_at           DateTime? @db.Timestamp(6)
  createdAt                 DateTime  @default(now()) @map(name: "created_at")
  updatedAt                 DateTime  @updatedAt @map(name: "updated_at")
  place_id                  Int?
  interoffice_connection_id Int?
  for_referrals             Boolean?  @default(false)
  has_response_from_office  Boolean?  @default(false)
  historic_channel_id       String?   @db.VarChar

  @@index([other_user_id], map: "idx_conversations_other_user_id")
  @@index([place_id], map: "idx_conversations_place_id")
  @@index([space_id], map: "idx_conversations_space_id")
  @@index([user_id], map: "idx_conversations_user_id")
  @@index([interoffice_connection_id], map: "index_conversations_on_interoffice_connection_id")
  @@index([other_user_id], map: "index_conversations_on_other_user_id")
  @@index([place_id], map: "index_conversations_on_place_id")
  @@index([space_id], map: "index_conversations_on_space_id")
  @@index([user_id], map: "index_conversations_on_user_id")
}

model create_place_requests {
  id           Int     @id @default(autoincrement())
  user_id      Int?
  name         String? @db.VarChar
  address1     String? @db.VarChar
  address2     String? @db.VarChar
  city         String? @db.VarChar
  state        String? @db.VarChar
  zip          String? @db.VarChar
  phone_number String? @db.VarChar
  npi          String? @db.VarChar
}

model interoffice_admins_places {
  id       Int    @id @default(autoincrement())
  place_id Int
  user_id  Int
  places   places @relation(fields: [place_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_interoffice_admins_places_place_id")
  users    users  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_interoffice_admins_places_user_id")

  @@index([place_id, user_id], map: "idx_interoffice_admins_places_place_user")
  @@index([place_id, user_id], map: "index_interoffice_admins_places_on_place_id_and_user_id")
}

model interoffice_connection_requests {
  id                                                             Int       @id @default(autoincrement())
  source_id                                                      Int
  source_place_id                                                Int
  target_id                                                      Int
  target_place_id                                                Int
  uuid                                                           String    @db.VarChar
  request_text                                                   String?
  accepted_at                                                    DateTime? @db.Timestamp(6)
  createdAt                                                      DateTime  @default(now()) @map(name: "created_at")
  updatedAt                                                      DateTime  @updatedAt @map(name: "updated_at")
  denied_at                                                      DateTime? @db.Timestamp(6)
  places_interoffice_connection_requests_target_place_idToplaces places    @relation("interoffice_connection_requests_target_place_idToplaces", fields: [target_place_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_1220690dee")
  users_interoffice_connection_requests_target_idTousers         users     @relation("interoffice_connection_requests_target_idTousers", fields: [target_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_2508d04e40")
  places_interoffice_connection_requests_source_place_idToplaces places    @relation("interoffice_connection_requests_source_place_idToplaces", fields: [source_place_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_52e61b2401")
  users_interoffice_connection_requests_source_idTousers         users     @relation("interoffice_connection_requests_source_idTousers", fields: [source_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_630647ca12")

  @@index([source_id], map: "index_interoffice_connection_requests_on_source_id")
  @@index([source_place_id], map: "index_interoffice_connection_requests_on_source_place_id")
  @@index([target_id], map: "index_interoffice_connection_requests_on_target_id")
  @@index([target_place_id], map: "index_interoffice_connection_requests_on_target_place_id")
}

model interoffice_connections {
  id                                                    Int      @id @default(autoincrement())
  place_id                                              Int
  other_place_id                                        Int
  createdAt                                             DateTime @default(now()) @map(name: "created_at")
  updatedAt                                             DateTime @updatedAt @map(name: "updated_at")
  channel_id                                            String   @db.VarChar
  presence_channel_id                                   String?  @db.VarChar
  referral_channel_id                                   String?  @db.VarChar
  places_interoffice_connections_other_place_idToplaces places   @relation("interoffice_connections_other_place_idToplaces", fields: [other_place_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_interoffice_connections_other_place_id")
  places_interoffice_connections_place_idToplaces       places   @relation("interoffice_connections_place_idToplaces", fields: [place_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_interoffice_connections_place_id")

  @@index([other_place_id], map: "index_interoffice_connections_on_other_place_id")
  @@index([place_id], map: "index_interoffice_connections_on_place_id")
}

model invitations {
  id                  Int       @id @default(autoincrement())
  inviter_id          Int?
  invitee_type        String?   @db.VarChar
  first_name          String?   @db.VarChar
  last_name           String?   @db.VarChar
  email               String?   @db.VarChar
  uuid                String?   @db.VarChar
  place_id            Int?
  space_ids           String?   @db.VarChar
  completed_at        DateTime? @db.Timestamp(6)
  invitee_user_id     Int?
  createdAt           DateTime  @default(now()) @map(name: "created_at")
  updatedAt           DateTime  @updatedAt @map(name: "updated_at")
  mobile_phone        String?   @db.VarChar
  invite_to_medroster Boolean?  @default(false)
  fax                 String?   @db.VarChar
  invitation_text     String?
}

model join_place_requests {
  id                Int       @id @default(autoincrement())
  user_id           Int?
  place_id          Int?
  createdAt         DateTime  @default(now()) @map(name: "created_at")
  updatedAt         DateTime  @updatedAt @map(name: "updated_at")
  verified_by_id    Int?
  verified_at       DateTime? @db.Timestamp(6)
  accepted          Boolean?
  npi               String?   @db.VarChar
  database_place_id String?   @db.VarChar(255)

  @@unique([place_id, user_id], map: "idx_join_place_requests_place_user")
  @@unique([place_id, user_id], map: "index_join_place_requests_on_place_id_and_user_id")
  @@index([user_id], map: "idx_join_place_requests_user_id")
  @@index([user_id], map: "index_join_place_requests_on_user_id")
}

model location_data {
  id    Int      @id @default(autoincrement())
  city  String?  @db.VarChar
  state String?  @db.VarChar
  lat   Decimal? @db.Decimal(10, 6)
  lng   Decimal? @db.Decimal(10, 6)

  @@index([lat, lng], map: "index_location_data_on_lat_and_lng")
}

model marketing_groups {
  id                     Int                      @id @default(autoincrement())
  name                   String?                  @db.VarChar
  partner_id             Int?
  createdAt              DateTime                 @default(now()) @map(name: "created_at")
  updatedAt              DateTime                 @updatedAt @map(name: "updated_at")
  users                  users?                   @relation(fields: [partner_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_marketing_groups_partner_id")
  marketing_groups_users marketing_groups_users[]
}

model marketing_groups_users {
  id                 Int               @id @default(autoincrement())
  user_id            Int?
  marketing_group_id Int?
  users              users?            @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_a8dc98483e")
  marketing_groups   marketing_groups? @relation(fields: [marketing_group_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_ec6ced63f9")

  @@unique([user_id, marketing_group_id], map: "idx_marketing_groups_users_user_id_marketing_group_id")
  @@unique([user_id, marketing_group_id], map: "index_marketing_groups_users_on_user_id_and_marketing_group_id")
}

model messages {
  id                Int      @id @default(autoincrement())
  content           String?  @db.VarChar(255)
  encrypted_content String?  @db.VarChar(255)
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @updatedAt @map(name: "updated_at")
  channel           String?  @db.VarChar(255)
  author            String?  @db.VarChar(255)
}

model mobile_phone_verifications {
  id           Int       @id @default(autoincrement())
  user_id      Int?
  phone        String?   @db.VarChar
  uuid         String?   @db.VarChar
  completed_at DateTime? @db.Timestamp(6)
  createdAt    DateTime  @default(now()) @map(name: "created_at")
  updatedAt    DateTime  @updatedAt @map(name: "updated_at")
  users        users?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_0bc756f30a")

  @@index([user_id], map: "idx_mobile_phone_verifications_user_id")
  @@index([user_id], map: "index_mobile_phone_verifications_on_user_id")
}

model partners_connections_requests {
  id                                                    Int      @id @default(autoincrement())
  accepted                                              Boolean?
  partner_id                                            Int?
  user_id                                               Int?
  message                                               String?  @db.VarChar
  users_partners_connections_requests_partner_idTousers users?   @relation("partners_connections_requests_partner_idTousers", fields: [partner_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_partners_connections_requests_partner_id")
  users_partners_connections_requests_user_idTousers    users?   @relation("partners_connections_requests_user_idTousers", fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_partners_connections_requests_user_id")

  @@unique([partner_id, user_id], map: "idx_unique_partner_user")
}

model pending_connection_requests {
  id                 Int      @id @default(autoincrement())
  source_user_id     Int?
  source_place_id    Int?
  pending_user_email String?  @db.VarChar
  createdAt          DateTime @default(now()) @map(name: "created_at")
  updatedAt          DateTime @updatedAt @map(name: "updated_at")
  invitation_id      Int?
}

model place_invitations {
  id              Int       @id @default(autoincrement())
  place_id        Int?
  inviter_id      Int?
  uuid            String?   @db.VarChar
  completed_at    DateTime? @db.Timestamp(6)
  createdAt       DateTime  @default(now()) @map(name: "created_at")
  updatedAt       DateTime  @updatedAt @map(name: "updated_at")
  invitee_user_id Int?

  @@index([inviter_id], map: "idx_place_invitations_inviter_id")
  @@index([place_id], map: "idx_place_invitations_place_id")
}

model place_user_connections {
  id            Int      @id @default(autoincrement())
  place_id      Int?
  user_id       Int?
  user_place_id Int?
  createdAt     DateTime @default(now()) @map(name: "created_at")
  updatedAt     DateTime @updatedAt @map(name: "updated_at")

  @@index([place_id], map: "idx_place_user_connections_place_id")
  @@index([user_id], map: "idx_place_user_connections_user_id")
  @@index([user_place_id], map: "idx_place_user_connections_user_place_id")
}

model places {
  id                                                                                      Int                               @id @default(autoincrement())
  name                                                                                    String?                           @db.VarChar
  channel_id                                                                              String?                           @db.VarChar
  description                                                                             String?                           @db.VarChar
  uuid                                                                                    String?                           @db.VarChar
  createdAt                                                                               DateTime                          @default(now()) @map(name: "created_at")
  updatedAt                                                                               DateTime                          @updatedAt @map(name: "updated_at")
  npi                                                                                     String?                           @db.VarChar
  name_vector                                                                             String?                           @db.VarChar
  state                                                                                   String?                           @db.VarChar(3)
  address                                                                                 String?                           @db.VarChar
  zip                                                                                     String?                           @db.VarChar(6)
  phone                                                                                   String?                           @db.VarChar(12)
  city                                                                                    String?                           @db.VarChar
  presence_channel_id                                                                     String?                           @db.VarChar
  unverified                                                                              Boolean?                          @default(false)
  fax                                                                                     String?                           @db.VarChar
  away_message                                                                            String?
  lat                                                                                     Decimal?                          @db.Decimal(10, 6)
  lng                                                                                     Decimal?                          @db.Decimal(10, 6)
  alt_phone                                                                               String?                           @db.VarChar
  database_id                                                                             String?                           @db.VarChar(255)
  interoffice_admins_places                                                               interoffice_admins_places[]
  interoffice_connection_requests_interoffice_connection_requests_target_place_idToplaces interoffice_connection_requests[] @relation("interoffice_connection_requests_target_place_idToplaces")
  interoffice_connection_requests_interoffice_connection_requests_source_place_idToplaces interoffice_connection_requests[] @relation("interoffice_connection_requests_source_place_idToplaces")
  interoffice_connections_interoffice_connections_other_place_idToplaces                  interoffice_connections[]         @relation("interoffice_connections_other_place_idToplaces")
  interoffice_connections_interoffice_connections_place_idToplaces                        interoffice_connections[]         @relation("interoffice_connections_place_idToplaces")

  @@index([lat, lng], map: "index_places_on_lat_and_lng")
  @@index([name_vector], map: "place_search_idx")
}

model places_users {
  place_id Int?
  user_id  Int?
  id       Int  @id @default(autoincrement())

  @@index([place_id, user_id], map: "idx_places_users_place_user")
  @@index([user_id], map: "idx_places_users_user_id")
  @@index([place_id, user_id], map: "index_places_users_on_place_id_and_user_id")
  @@index([user_id], map: "index_places_users_on_user_id")
}

model practice_data {
  id          Int     @id @default(autoincrement())
  name        String? @db.VarChar
  state       String? @db.VarChar(3)
  address     String? @db.VarChar
  zip         String? @db.VarChar(6)
  phone       String? @db.VarChar(12)
  npi         String? @unique(map: "idx_practice_data_npi") @db.VarChar(11)
  city        String? @db.VarChar
  name_vector String? @db.VarChar
  fax         String? @db.VarChar

  @@index([name_vector], map: "practice_data_search_idx")
}

model practitioner_data {
  id                    Int      @id @default(autoincrement())
  title                 String?  @db.VarChar
  first_name            String?  @db.VarChar
  middle_name           String?  @db.VarChar
  last_name             String?  @db.VarChar
  credentials           String?  @db.VarChar
  taxonomy_code         String?  @db.VarChar
  specialty_description String?  @db.VarChar
  address               String?  @db.VarChar
  city                  String?  @db.VarChar
  state                 String?  @db.VarChar(3)
  gender                String?  @db.VarChar(2)
  npi                   String?  @unique(map: "idx_practitioner_data_npi") @db.VarChar(11)
  given_name_vector     String?  @db.VarChar
  last_name_vector      String?  @db.VarChar
  phone                 String?  @db.VarChar
  fax                   String?  @db.VarChar
  lat                   Decimal? @db.Decimal(10, 6)
  lng                   Decimal? @db.Decimal(10, 6)

  @@index([lat, lng], map: "index_practitioner_data_on_lat_and_lng")
  @@index([given_name_vector], map: "practitioner_data_given_name_search_idx")
  @@index([last_name_vector], map: "practitioner_data_last_name_search_idx")
}

model push_notifications {
  id                   Int      @id @default(autoincrement())
  user_id              Int?
  pending              Boolean? @default(true)
  createdAt            DateTime @default(now()) @map(name: "created_at")
  updatedAt            DateTime @updatedAt @map(name: "updated_at")
  last_conversation_id String?  @db.VarChar
}

model schema_migrations {
  version String @unique(map: "unique_schema_migrations") @db.VarChar
}

model spaces {
  id          Int      @id @default(autoincrement())
  name        String?  @db.VarChar
  channel_id  String?  @db.VarChar
  description String?  @db.VarChar
  uuid        String?  @db.VarChar
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @updatedAt @map(name: "updated_at")
  place_id    Int?

  @@unique([place_id, name], map: "idx_unique_name_space")
  @@unique([place_id, name], map: "index_spaces_on_place_id_and_name")
}

model spaces_users {
  space_id Int?
  user_id  Int?
  id       Int  @id @default(autoincrement())

  @@index([space_id, user_id], map: "idx_spaces_users_space_user")
  @@index([user_id], map: "idx_spaces_users_user_id")
  @@index([space_id, user_id], map: "index_spaces_users_on_space_id_and_user_id")
  @@index([user_id], map: "index_spaces_users_on_user_id")
}

model team_members {
  patient_user_id Int?
  staff_user_id   Int?
  id              Int  @id @default(autoincrement())

  @@unique([staff_user_id, patient_user_id], map: "index_team_members_on_staff_user_id_and_patient_user_id")
  @@index([patient_user_id], map: "index_team_members_on_patient_user_id")
}

model user_connections {
  id                      Int      @id @default(autoincrement())
  user_id                 Int?
  connected_user_id       Int?
  user_place_id           Int?
  connected_user_place_id Int?
  createdAt               DateTime @default(now()) @map(name: "created_at")
  updatedAt               DateTime @updatedAt @map(name: "updated_at")

  @@index([connected_user_id], map: "idx_user_connections_connected_user_id")
  @@index([connected_user_place_id], map: "idx_user_connections_connected_user_place_id")
  @@index([user_id], map: "idx_user_connections_user_id")
  @@index([user_place_id], map: "idx_user_connections_user_place_id")
}

model users {
  id                                                                               Int                               @id @default(autoincrement())
  email                                                                            String?                           @default("") @db.VarChar
  encrypted_password                                                               String                            @default("") @db.VarChar
  reset_password_token                                                             String?                           @unique(map: "idx_users_reset_password_token") @db.VarChar
  reset_password_sent_at                                                           DateTime?                         @db.Timestamp(6)
  remember_created_at                                                              DateTime?                         @db.Timestamp(6)
  sign_in_count                                                                    Int                               @default(0)
  current_sign_in_at                                                               DateTime?                         @db.Timestamp(6)
  last_sign_in_at                                                                  DateTime?                         @db.Timestamp(6)
  current_sign_in_ip                                                               String?                           @db.VarChar
  last_sign_in_ip                                                                  String?                           @db.VarChar
  createdAt                                                                        DateTime                          @default(now()) @map(name: "created_at")
  updatedAt                                                                        DateTime                          @updatedAt @map(name: "updated_at")
  first_name                                                                       String?                           @db.VarChar
  last_name                                                                        String?                           @db.VarChar
  phone_number                                                                     String?                           @db.VarChar
  channel_id                                                                       String?                           @db.VarChar
  uuid                                                                             String?                           @db.VarChar
  type                                                                             String?                           @db.VarChar
  npi                                                                              String?                           @db.VarChar
  confirmation_token                                                               String?                           @unique(map: "index_users_on_confirmation_token") @db.VarChar
  confirmed_at                                                                     DateTime?                         @db.Timestamp(6)
  confirmation_sent_at                                                             DateTime?                         @db.Timestamp(6)
  unconfirmed_email                                                                String?                           @db.VarChar
  specialty                                                                        String?                           @db.VarChar
  title                                                                            String?                           @db.VarChar
  invitation_token                                                                 String?                           @db.VarChar
  gender                                                                           String?                           @db.VarChar(255)
  api_auth_token                                                                   String?                           @unique(map: "idx_users_api_auth_token") @db.VarChar
  device_token                                                                     String?                           @db.VarChar
  is_root                                                                          Boolean?                          @default(false)
  device_platform                                                                  String?                           @db.VarChar
  filepicker_url                                                                   String?                           @default("") @db.VarChar
  full_name_vector                                                                 String?                           @db.VarChar
  invited_by_id                                                                    Int?
  invitations_count                                                                Int?                              @default(0)
  identity_id                                                                      String?                           @db.VarChar(255)
  advertisements                                                                   advertisements[]
  interoffice_admins_places                                                        interoffice_admins_places[]
  interoffice_connection_requests_interoffice_connection_requests_target_idTousers interoffice_connection_requests[] @relation("interoffice_connection_requests_target_idTousers")
  interoffice_connection_requests_interoffice_connection_requests_source_idTousers interoffice_connection_requests[] @relation("interoffice_connection_requests_source_idTousers")
  marketing_groups                                                                 marketing_groups[]
  marketing_groups_users                                                           marketing_groups_users[]
  mobile_phone_verifications                                                       mobile_phone_verifications[]
  partners_connections_requests_partners_connections_requests_partner_idTousers    partners_connections_requests[]   @relation("partners_connections_requests_partner_idTousers")
  partners_connections_requests_partners_connections_requests_user_idTousers       partners_connections_requests[]   @relation("partners_connections_requests_user_idTousers")
  users_advertisements                                                             users_advertisements[]

  @@index([email], map: "idx_users_email")
  @@index([last_name], map: "idx_users_last_name")
  @@index([email], map: "index_users_on_email")
  @@index([last_name], map: "index_users_on_last_name")
  @@index([full_name_vector], map: "users_full_name_search_idx")
}

model users_advertisements {
  id               Int             @id @default(autoincrement())
  viewed           Boolean?
  target_user_id   Int?
  advertisement_id Int?
  advertisements   advertisements? @relation(fields: [advertisement_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_4ab6ea49ae")
  users            users?          @relation(fields: [target_user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_673f388cbf")
}
